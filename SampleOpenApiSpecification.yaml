openapi: 3.0.0
info:
  version: '1.0'
  title: 'Employee Service API'
  description: 'This service provides information about employees'
  termsOfService: https://example.com/terms
  contact:
    name: Karthikeyan Nithiyanandam
    url: https://www.linkedin.com/in/karthikeyan-nithiyanandam/
    email: karthikeyan.ng@gmail.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers: 
  - url: https://dev.mysite.com
    description: Development Server
  - url: https://qa.mysite.com
    description: QA Server
  - url: https://prod.mysite.com
    description: Production Server 
paths:
  /v1/employess:
    get:
      summary: List Employees
      description: Get a List of *Employees* in the system       
      tags: 
        - Employees      
      operationId: listEmployeesV1
      parameters: 
        - $ref: "#/components/parameters/PageNumberParam"
        - $ref: "#/components/parameters/PageSizeParam"   
      responses:
        '200':
          description: List of Employees
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmployeePagedList"
      security: []      
    post:
      summary: New Employee
      description: Create a new Employee
      tags: 
        - Employees
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Employee"
      responses:
        '201':
          description: Employee Created  
          headers:
            location:
              description: Location of the created Employee
              schema:
                type: string
                format: uri
                example: http://example.com/v1/employees/{assignedIdValue}  
        '400':
          description: Bad Request
        '409':
          description: Conflict
  /v1/employess/{employeeId}:
    get:
      summary: Get Employee by Id
      description: Get a single **Employees** by it's Id value    
      tags: 
        - Employees      
      operationId: getEmployeeByIdV1
      parameters: 
        - $ref: "#/components/parameters/EmployeeIdPathParam"
      responses:
        '200':
          description: Found Employee
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Employee"            
        '404':
          description: Not Found    
      security: []    
    delete:
      summary: Delete Employee by Id
      description: Delete a single **Employees** by it's Id value
      tags: 
        - Employees
      operationId: deleteEmployeeByIdV1
      parameters: 
        - $ref: "#/components/parameters/EmployeeIdPathParam"
      responses:
        '200':
          description: Employee Deleted    
        '404':
          description: Not Found    
    put:
      summary: Update Employee by Id
      description: Update Employee by id
      tags: 
        - Employees
      operationId: updateEmployeeByIdV1
      parameters: 
        - $ref: "#/components/parameters/EmployeeIdPathParam"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Employee"
      responses:
        '204':
          description: Employee Updated  
        '400':
          description: Bad Request
        '409':
          description: Conflict  
  /v1/employees/{employeeId}/orders:
    parameters:
      - $ref: "#/components/parameters/EmployeeIdPathParam"
    post:
      description: Place Order
      tags: 
        - Order Service
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BeerOrder"
      responses:
        '201':
          description: Order Created
          headers:
            location:
              description: Reference to created Order
              schema:
                type: string
                format: uri
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '409':
          description: Conflict
      callbacks:
        orderStatusChange:
          '${request.body#/orderStatusCallback}':
            description: Webhook for order status change notification
            post:
              requestBody:
                content:
                  application/json:
                    schema:
                      type: object
                      properties:
                        orderId:
                          type: string
                          format: uuid
                        orderStatus:
                          type: string
              responses:
                '200':
                  description: Okay  
  /v1/beers:
    get:
      summary: List Beers
      description: Get a List of *Beer* in the system    
      tags: 
        - Beers      
      operationId: listBeersV1
      parameters: 
        - $ref: "#/components/parameters/PageNumberParam"
        - $ref: "#/components/parameters/PageSizeParam"   
      responses:
        '200':
          description: List of Beers
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BeerPagedList"
        '400':
          description: Not Found
    post:
      summary: New Beer
      description: Create a new Beer
      tags: 
        - Beers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Beer"
      responses:
        '201':
          description: Beer Created
          headers:
            location:
              description: Location of the created Beer
              schema:
                type: string
                format: uri
                example: http://example.com/v1/beers/{assignedIdValue}  
        '400':
          description: Bad Request
        '409':
          description: Conflict  
  /v1/beers/{beerId}:
    get:
      summary: Get Beer by Id
      description: Get a single **Beer** by it's Id value
      tags: 
        - Beers
      operationId: getBeerByIdV1
      parameters: 
        - $ref: "#/components/parameters/BeerIdPathParam"
      responses:
        '200':
          description: Found Beer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Beer"          
        '404':
          description: Not Found     
    delete:
      summary: Delete Beer by Id
      description: Delete a single **Beer** by it's Id value
      tags: 
        - Beers
      operationId: deleteBeerByIdV1
      parameters: 
        - $ref: "#/components/parameters/BeerIdPathParam"
      responses:
        '200':
          description: Beer Deleted     
        '404':
          description: Not Found    
    put:
      summary: Update Beer by Id
      description: Update Beer by id
      tags: 
        - Beers
      operationId: updateBeerByIdV1
      parameters: 
        - $ref: "#/components/parameters/BeerIdPathParam"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Beer"
      responses:
        '204':
          description: Beer Updated        
        '400':
          description: Bad Request
        '409':
          description: Conflict
security: 
  - BasicAuth: []
  - JwtAuthToken: []
components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic  
    JwtAuthToken:
      type: http
      scheme: bearer
      bearerFormat: JWT  
  parameters:
    PageNumberParam:
      name: pageNumber
      in: query
      description: Page Number
      required: false
      schema:
        type: integer
        format: int32
        default: 1
    PageSizeParam:
      name: pageSize
      in: query
      description: Page Size
      required: false
      schema:
        type: integer
        format: int32
        default: 25
    EmployeeIdPathParam:
      name: employeeId
      in: path
      description: Employee Id
      required: true
      schema:
        type: string
        format: uuid   
    BeerIdPathParam:
      name: beerId
      in: path
      description: Beer Id
      required: true
      schema:
        type: string
        format: uuid   
  schemas:
    Address:
      type: object
      properties:
        line1:
          type: string
          example: My address info
        city:
          type: string
          example: Chennai
        stateCode:
          type: string
          minLength: 2
          maxLength: 2
          description: 2 letter state codes
          # we can represents enum in 2 different ways
          #enum: [TN, AP, KN, KL, GA, TS]  # 1st way
          enum:                            # 2nd way
            - TN
            - AP
            - KN
            - KL
            - GA
            - TS
        zipCode:
          type: string
          example: 123456
    Employee:
      type: object
      description: Employee object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true        
        firstname:
          type: string
          minLength: 2
          maxLength: 100
          example: Karthikeyan
        lastname:
          type: string
          minLength: 2
          maxLength: 100
          example: Nithiyanandam
        address:
          $ref: "#/components/schemas/Address"
    EmployeeList:
      type: array
      minItems: 1
      maxItems: 100
      description: List of Employees
      items:
         $ref: "#/components/schemas/Employee"
    Brewery:
      type: object
      properties:
        name:
          type: string
        location:
          type: string
    Beer:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
        style:
          type: string
          enum: [ALE, PALE_ALE, IPA, WHEAT, LAGER]
        upc:
          type: string
        price:
          type: number
          format: double
        quantity:
          type: integer
          format: int32
        brewery:
          $ref: "#/components/schemas/Brewery"
    BeerList:
      type: array
      minItems: 1
      maxItems: 100
      description: List of Beers
      items:
         $ref: "#/components/schemas/Beer"
    BeerOrder:
      required:
      - employeeId
      type: object
      properties:
        id:
          type: string
          format: uuid
          nullable: true
          readOnly: true
        employeeId:
          type: string
          format: uuid
        employeeRef:
          type: string
          nullable: true
        beerOrderLines:
          type: array
          items:
            $ref: '#/components/schemas/BeerOrderLine'
        orderStatusCallbackUrl:
          type: string
          format: uri
    BeerOrderLine:
      required:
      - orderQuantity
      - upc
      type: object
      properties:
        id:
          type: string
          format: uuid
          nullable: true
          readOnly: true
        beerId:
          type: string
          format: uuid
          readOnly: true
        upc:
          type: string
        orderQuantity:
          maximum: 999
          minimum: 1
          type: integer
        quantityAllocated:
          type: integer
          nullable: true
          readOnly: true    
    BeerPagedList:
      type: object
      allOf:
        - $ref: "#/components/schemas/PagedResponse"
      properties:
        content: 
          $ref: "#/components/schemas/BeerList"
    EmployeePagedList:
      type: object
      allOf:
        - $ref: "#/components/schemas/PagedResponse"
      properties:
        content: 
          $ref: "#/components/schemas/EmployeeList"
    PagedResponse:
      type: object
      properties:
        pageable:
          type: object
          properties:
            sort:
              type: object
              properties:
                sorted:
                  type: boolean
                unsorted:
                  type: boolean
            offset:
              type: integer
              format: int32
            pageNumber:
              type: integer
              format: int32
            pageSize:
              type: integer
              format: int32
            paged:
              type: boolean
            unpaged:
              type: boolean
        totalPages:
          type: integer
          format: int32
        last:
          type: boolean
        totalElement:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        number:
          type: integer
          format: int32
        numberOfElements:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/PagedResponse_pageable_sort'
        first:
          type: boolean
    PagedResponse_pageable_sort:
      type: object
      properties:
        sorted:
          type: boolean
        unsorted:
          type: boolean
    PagedResponse_pageable:
      type: object
      properties:
        sort:
          $ref: '#/components/schemas/PagedResponse_pageable_sort'
        offset:
          type: integer
          format: int32
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        paged:
          type: boolean
        unpaged:
          type: boolean
          
