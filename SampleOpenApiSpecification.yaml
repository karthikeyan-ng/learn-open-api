openapi: 3.0.0
info:
  version: '1.0'
  title: 'Employee Service API'
  description: 'This service provides information about employees'
  termsOfService: https://example.com/terms
  contact:
    name: Karthikeyan Nithiyanandam
    url: https://www.linkedin.com/in/karthikeyan-nithiyanandam/
    email: karthikeyan.ng@gmail.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers: 
  - url: https://dev.mysite.com
    description: Development Server
  - url: https://qa.mysite.com
    description: QA Server
  - url: https://prod.mysite.com
    description: Production Server 
paths:
  /v1/employess:
    get:
      parameters: 
        - $ref: "#/components/parameters/PageNumberParam"
        - $ref: "#/components/parameters/PageSizeParam"   
      responses:
        '200':
          description: List of Employees
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmployeePagedList"
  /v1/beers:
    get:
      parameters: 
        - $ref: "#/components/parameters/PageNumberParam"
        - $ref: "#/components/parameters/PageSizeParam"   
      responses:
        '200':
          description: List of Beers
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BeerPagedList"
        '400':
          description: Not Found
components:
  parameters:
    PageNumberParam:
      name: pageNumber
      in: query
      description: Page Number
      required: false
      schema:
        type: integer
        format: int32
        default: 1
    PageSizeParam:
      name: pageSize
      in: query
      description: Page Size
      required: false
      schema:
        type: integer
        format: int32
        default: 25
  schemas:
    Address:
      type: object
      properties:
        line1:
          type: string
          example: My address info
        city:
          type: string
          example: Chennai
        stateCode:
          type: string
          minLength: 2
          maxLength: 2
          description: 2 letter state codes
          # we can represents enum in 2 different ways
          #enum: [TN, AP, KN, KL, GA, TS]  # 1st way
          enum:                            # 2nd way
            - TN
            - AP
            - KN
            - KL
            - GA
            - TS
        zipCode:
          type: string
          example: 123456
    Employee:
      type: object
      description: Employee object
      properties:
        id:
          type: string
          format: uuid
        firstname:
          type: string
          minLength: 2
          maxLength: 100
          example: Karthikeyan
        lastname:
          type: string
          minLength: 2
          maxLength: 100
          example: Nithiyanandam
        address:
          $ref: "#/components/schemas/Address"
    EmployeeList:
      type: array
      minItems: 1
      maxItems: 100
      description: List of Employees
      items:
         $ref: "#/components/schemas/Employee"
    Brewery:
      type: object
      properties:
        name:
          type: string
        location:
          type: string
    Beer:
      type: object
      properties:
        name:
          type: string
        style:
          type: string
          enum: [ALE, PALE_ALE, IPA, WHEAT, LAGER]
        upc:
          type: string
        price:
          type: number
          format: double
        quantity:
          type: integer
          format: int32
        brewery:
          $ref: "#/components/schemas/Brewery"
    BeerList:
      type: array
      minItems: 1
      maxItems: 100
      description: List of Beers
      items:
         $ref: "#/components/schemas/Beer"
    BeerPagedList:
      type: object
      allOf:
        - $ref: "#/components/schemas/PagedResponse"
      properties:
        content: 
          $ref: "#/components/schemas/BeerList"
    EmployeePagedList:
      type: object
      allOf:
        - $ref: "#/components/schemas/PagedResponse"
      properties:
        content: 
          $ref: "#/components/schemas/EmployeeList"
    PagedResponse:
      type: object
      properties:
        pageable:
          type: object
          properties:
            sort:
              type: object
              properties:
                sorted:
                  type: boolean
                unsorted:
                  type: boolean
            offset:
              type: integer
              format: int32
            pageNumber:
              type: integer
              format: int32
            pageSize:
              type: integer
              format: int32
            paged:
              type: boolean
            unpaged:
              type: boolean
        totalPages:
          type: integer
          format: int32
        last:
          type: boolean
        totalElement:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        number:
          type: integer
          format: int32
        numberOfElements:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/PagedResponse_pageable_sort'
        first:
          type: boolean
    PagedResponse_pageable_sort:
      type: object
      properties:
        sorted:
          type: boolean
        unsorted:
          type: boolean
    PagedResponse_pageable:
      type: object
      properties:
        sort:
          $ref: '#/components/schemas/PagedResponse_pageable_sort'
        offset:
          type: integer
          format: int32
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        paged:
          type: boolean
        unpaged:
          type: boolean
          
